# {{PROBLEM}} Class Design Recipe

## 1. Describe the Problem

As a user
So that I can keep track of my music listening
I want to add tracks I've listened to and see a list of them.

## 2. Design the Class Interface

_Include the initializer and public methods with all parameters and return values._

```ruby
class MusicLibrary

def initialize 
    @music_list = []
end

def add_music(track)
    #adds a track to a list
    @music_list << track
end

def list
    #return a list of tracks that have been added
    return @music_list
end



```

## 3. Create Examples as Tests

_Make a list of examples of how the class will behave in different situations._

```ruby
# EXAMPLE

# 1 test for an empty list
    music_library = MusicLibrary.new
    music_library.list -> []


# 2 when one track is added it appears on the list
    music_library = MusicLibrary.new
    music_library.add("track1") 
    music_library.list -> ["track1"]

# 3 when two tracks are added they both appear on the list
    music_library = MusicLibrary.new
    music_library.add("track1")
    music_library.add("track2")
    music_library.list -> ["track1", "track2"]

```

_Encode each example as a test. You can add to the above list as you go._

## 4. Implement the Behaviour

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour._


